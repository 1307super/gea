// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package config

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table sys_config.
type Entity struct {
    ConfigId    int         `orm:"config_id,primary" json:"config_id"`    // 参数主键             
    ConfigName  string      `orm:"config_name"       json:"config_name"`  // 参数名称             
    ConfigKey   string      `orm:"config_key"        json:"config_key"`   // 参数键名             
    ConfigValue string      `orm:"config_value"      json:"config_value"` // 参数键值             
    ConfigType  string      `orm:"config_type"       json:"config_type"`  // 系统内置（Y是 N否）  
    CreateBy    string      `orm:"create_by"         json:"create_by"`    // 创建者               
    CreateTime  *gtime.Time `orm:"create_time"       json:"create_time"`  // 创建时间             
    UpdateBy    string      `orm:"update_by"         json:"update_by"`    // 更新者               
    UpdateTime  *gtime.Time `orm:"update_time"       json:"update_time"`  // 更新时间             
    Remark      string      `orm:"remark"            json:"remark"`       // 备注                 
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}
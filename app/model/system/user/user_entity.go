// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package user

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table sys_user.
type Entity struct {
    UserId      int64       `orm:"user_id,primary" json:"user_id"`     // 用户ID                           
    DeptId      int64       `orm:"dept_id"         json:"dept_id"`     // 部门ID                           
    LoginName   string      `orm:"login_name"      json:"login_name"`  // 登录账号                         
    UserName    string      `orm:"user_name"       json:"user_name"`   // 用户昵称                         
    UserType    string      `orm:"user_type"       json:"user_type"`   // 用户类型（00系统用户）           
    Email       string      `orm:"email"           json:"email"`       // 用户邮箱                         
    Phonenumber string      `orm:"phonenumber"     json:"phonenumber"` // 手机号码                         
    Sex         string      `orm:"sex"             json:"sex"`         // 用户性别（0男 1女 2未知）        
    Avatar      string      `orm:"avatar"          json:"avatar"`      // 头像路径                         
    Password    string      `orm:"password"        json:"password"`    // 密码                             
    Salt        string      `orm:"salt"            json:"salt"`        // 盐加密                           
    Status      string      `orm:"status"          json:"status"`      // 帐号状态（0正常 1停用）          
    DelFlag     string      `orm:"del_flag"        json:"del_flag"`    // 删除标志（0代表存在 2代表删除）  
    LoginIp     string      `orm:"login_ip"        json:"login_ip"`    // 最后登陆IP                       
    LoginDate   *gtime.Time `orm:"login_date"      json:"login_date"`  // 最后登陆时间                     
    CreateBy    string      `orm:"create_by"       json:"create_by"`   // 创建者                           
    CreateTime  *gtime.Time `orm:"create_time"     json:"create_time"` // 创建时间                         
    UpdateBy    string      `orm:"update_by"       json:"update_by"`   // 更新者                           
    UpdateTime  *gtime.Time `orm:"update_time"     json:"update_time"` // 更新时间                         
    Remark      string      `orm:"remark"          json:"remark"`      // 备注                             
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}
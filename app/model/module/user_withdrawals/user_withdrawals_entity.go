// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package user_withdrawals

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
)

// Entity is the golang structure for table t_user_withdrawals.
type Entity struct {
    Wid          int     `orm:"wid,primary"  json:"wid"`          // 申请ID    
    Uid          int     `orm:"uid"          json:"uid"`          // 用户ID    
    Realname     string  `orm:"realname"     json:"realname"`     // 姓名      
    Idno         string  `orm:"idno"         json:"idno"`         // 身份证号  
    Wmoney       float64 `orm:"wmoney"       json:"wmoney"`       // 提现金额  
    Wbankname    string  `orm:"wbankname"    json:"wbankname"`    // 银行名称  
    Wbankaccount string  `orm:"wbankaccount" json:"wbankaccount"` // 银行帐户  
    Wrealname    string  `orm:"wrealname"    json:"wrealname"`    // 银行户名  
    Wopenbank    string  `orm:"wopenbank"    json:"wopenbank"`    // 开户行    
    Wcreatetime  string  `orm:"wcreatetime"  json:"wcreatetime"`  // 申请时间  
    Wstatus      int     `orm:"wstatus"      json:"wstatus"`      // 审核结果  
    Wremark      string  `orm:"wremark"      json:"wremark"`      // 审核意见  
    Waudittime   string  `orm:"waudittime"   json:"waudittime"`   // 审核时间  
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}
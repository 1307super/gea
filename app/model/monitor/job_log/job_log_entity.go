// ==========================================================================
// This is auto-generated by gf cli tool. You may not really want to edit it.
// ==========================================================================

package job_log

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/os/gtime"
)

// Entity is the golang structure for table sys_job_log.
type Entity struct {
    JobLogId      int64       `orm:"job_log_id,primary" json:"job_log_id"`     // 任务日志ID               
    JobName       string      `orm:"job_name"           json:"job_name"`       // 任务名称                 
    JobGroup      string      `orm:"job_group"          json:"job_group"`      // 任务组名                 
    InvokeTarget  string      `orm:"invoke_target"      json:"invoke_target"`  // 调用目标字符串           
    JobMessage    string      `orm:"job_message"        json:"job_message"`    // 日志信息                 
    Status        string      `orm:"status"             json:"status"`         // 执行状态（0正常 1失败）  
    ExceptionInfo string      `orm:"exception_info"     json:"exception_info"` // 异常信息                 
    CreateTime    *gtime.Time `orm:"create_time"        json:"create_time"`    // 创建时间                 
}

// OmitEmpty sets OPTION_OMITEMPTY option for the model, which automatically filers
// the data and where attributes for empty values.
func (r *Entity) OmitEmpty() *arModel {
	return Model.Data(r).OmitEmpty()
}

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *Entity) Insert() (result sql.Result, err error) {
	return Model.Data(r).Insert()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *Entity) Replace() (result sql.Result, err error) {
	return Model.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Save() (result sql.Result, err error) {
	return Model.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *Entity) Update() (result sql.Result, err error) {
	return Model.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *Entity) Delete() (result sql.Result, err error) {
	return Model.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}